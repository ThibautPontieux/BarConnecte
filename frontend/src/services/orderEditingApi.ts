import { adminApi } from './api';
import type { 
  StockCheckResult, 
  EditOrderRequest, 
  AcceptPartialOrderRequest, 
  ModifyQuantitiesRequest,
  OrderEditSuggestions,
  Order
} from '../types/Order';

export class OrderEditingApiService {
  
  // === V√âRIFICATION DE STOCK ===
  
  /**
   * V√©rifie le stock d√©taill√© d'une commande
   * GET /admin/orders/{id}/stock-check
   */
  static async checkOrderStock(orderId: number): Promise<StockCheckResult> {
    console.log('üîç V√©rification stock pour commande:', orderId);
    
    try {
      const response = await adminApi.get<StockCheckResult>(`/orders/${orderId}/stock-check`);
      console.log('‚úÖ Stock v√©rifi√©:', response.data);
      
      // Conversion des dates string vers Date objects
      const result: StockCheckResult = {
        ...response.data,
        checkedAt: new Date(response.data.checkedAt)
      };
      
      return result;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification stock:', error);
      throw new Error('Impossible de v√©rifier le stock de cette commande');
    }
  }

  /**
   * Obtient des suggestions d'√©dition automatiques
   * GET /admin/orders/{id}/suggestions
   */
  static async getOrderEditSuggestions(orderId: number): Promise<OrderEditSuggestions> {
    console.log('üí° R√©cup√©ration suggestions pour commande:', orderId);
    
    try {
      const response = await adminApi.get<OrderEditSuggestions>(`/orders/${orderId}/suggestions`);
      console.log('‚úÖ Suggestions r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration suggestions:', error);
      throw new Error('Impossible de g√©n√©rer des suggestions pour cette commande');
    }
  }

  // === √âDITION DE COMMANDES ===

  /**
   * √âdite compl√®tement une commande (remplace tous les articles)
   * PUT /admin/orders/{id}/edit
   */
  static async editOrder(orderId: number, editRequest: EditOrderRequest): Promise<Order> {
    console.log('‚úèÔ∏è √âdition compl√®te commande:', orderId, editRequest);
    
    try {
      // Validation c√¥t√© client
      if (!editRequest.reason.trim()) {
        throw new Error('Une raison doit √™tre fournie pour la modification');
      }
      
      if (editRequest.items.length === 0) {
        throw new Error('Au moins un article doit √™tre pr√©sent dans la commande');
      }
      
      if (editRequest.items.some(item => item.quantity <= 0)) {
        throw new Error('Toutes les quantit√©s doivent √™tre sup√©rieures √† 0');
      }

      const response = await adminApi.put<any>(`/orders/${orderId}/edit`, editRequest);
      console.log('‚úÖ Commande √©dit√©e:', response.data);
      
      // Convertir la r√©ponse backend vers le format frontend
      return this.convertExtendedOrderResponse(response.data);
    } catch (error: any) {
      console.error('‚ùå Erreur √©dition commande:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error('Impossible d\'√©diter cette commande');
    }
  }

  /**
   * Accepte une commande en retirant certains articles
   * POST /admin/orders/{id}/accept-partial
   */
  static async acceptPartialOrder(
    orderId: number, 
    acceptRequest: AcceptPartialOrderRequest
  ): Promise<Order> {
    console.log('‚úÖüî™ Acceptation partielle commande:', orderId, acceptRequest);
    
    try {
      // Validation c√¥t√© client
      if (!acceptRequest.reason.trim()) {
        throw new Error('Une raison doit √™tre fournie pour les retraits');
      }
      
      if (acceptRequest.itemsToRemove.length === 0) {
        throw new Error('Au moins un article doit √™tre sp√©cifi√© pour le retrait');
      }

      const response = await adminApi.post<any>(`/orders/${orderId}/accept-partial`, acceptRequest);
      console.log('‚úÖ Commande accept√©e partiellement:', response.data);
      
      return this.convertExtendedOrderResponse(response.data);
    } catch (error: any) {
      console.error('‚ùå Erreur acceptation partielle:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error('Impossible d\'accepter partiellement cette commande');
    }
  }

  /**
   * Modifie les quantit√©s d'articles existants
   * PUT /admin/orders/{id}/modify-quantities
   */
  static async modifyOrderQuantities(
    orderId: number, 
    modifyRequest: ModifyQuantitiesRequest
  ): Promise<Order> {
    console.log('üî¢ Modification quantit√©s commande:', orderId, modifyRequest);
    
    try {
      // Validation c√¥t√© client
      if (!modifyRequest.reason.trim()) {
        throw new Error('Une raison doit √™tre fournie pour les modifications');
      }
      
      if (Object.keys(modifyRequest.quantityChanges).length === 0) {
        throw new Error('Au moins une modification de quantit√© doit √™tre sp√©cifi√©e');
      }
      
      if (Object.values(modifyRequest.quantityChanges).some(qty => qty < 0)) {
        throw new Error('Les quantit√©s ne peuvent pas √™tre n√©gatives');
      }

      const response = await adminApi.put<any>(`/orders/${orderId}/modify-quantities`, modifyRequest);
      console.log('‚úÖ Quantit√©s modifi√©es:', response.data);
      
      return this.convertExtendedOrderResponse(response.data);
    } catch (error: any) {
      console.error('‚ùå Erreur modification quantit√©s:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error('Impossible de modifier les quantit√©s de cette commande');
    }
  }

  /**
   * R√©cup√®re les d√©tails complets d'une commande
   * GET /admin/orders/{id}
   */
  static async getOrderDetails(orderId: number): Promise<Order> {
    console.log('üìã R√©cup√©ration d√©tails commande:', orderId);
    
    try {
      const response = await adminApi.get<any>(`/orders/${orderId}`);
      console.log('‚úÖ D√©tails r√©cup√©r√©s:', response.data);
      
      return this.convertExtendedOrderResponse(response.data);
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration d√©tails:', error);
      throw new Error('Impossible de r√©cup√©rer les d√©tails de cette commande');
    }
  }

  // === M√âTHODES UTILITAIRES ===

  /**
   * Convertit une ExtendedOrderResponse du backend vers un Order frontend
   */
  private static convertExtendedOrderResponse(backendOrder: any): Order {
    return {
      id: backendOrder.id,
      customerName: backendOrder.customerName,
      status: backendOrder.status.toLowerCase() as Order['status'],
      total: backendOrder.totalAmount,
      timestamp: new Date(backendOrder.createdAt),
      
      // Conversion des items
      items: backendOrder.items.map((item: any, index: number) => ({
        id: Date.now() + index, // ID temporaire pour les items
        name: item.drinkName,
        price: item.unitPrice,
        stock: 0, // Non disponible dans la r√©ponse
        category: 'Unknown', // Non disponible dans la r√©ponse
        quantity: item.quantity,
      })),
      
      // Nouvelles propri√©t√©s d'√©dition
      isPartiallyModified: backendOrder.isPartiallyModified,
      modificationReason: backendOrder.modificationReason,
      lastModifiedAt: backendOrder.lastModifiedAt 
        ? new Date(backendOrder.lastModifiedAt) 
        : undefined,
    };
  }

  /**
   * Valide une requ√™te d'√©dition c√¥t√© client
   */
  static validateEditRequest(editRequest: EditOrderRequest): string | null {
    if (!editRequest.reason.trim()) {
      return 'Une raison doit √™tre fournie pour la modification';
    }
    
    if (editRequest.items.length === 0) {
      return 'Au moins un article doit √™tre pr√©sent dans la commande modifi√©e';
    }
    
    if (editRequest.items.some(item => item.quantity <= 0)) {
      return 'Toutes les quantit√©s doivent √™tre sup√©rieures √† 0';
    }
    
    if (editRequest.reason.length > 500) {
      return 'La raison ne peut pas d√©passer 500 caract√®res';
    }
    
    return null; // Validation r√©ussie
  }

  /**
   * Cr√©e une requ√™te d'√©dition bas√©e sur des modifications d'articles
   */
  static createEditRequestFromOrder(
    order: Order, 
    modifiedItems: Array<{drinkId: number, quantity: number}>, 
    reason: string
  ): EditOrderRequest {
    return {
      items: modifiedItems.map(item => ({
        drinkId: item.drinkId,
        quantity: item.quantity
      })),
      reason: reason.trim()
    };
  }

  /**
   * Cr√©e une requ√™te d'acceptation partielle bas√©e sur les items √† retirer
   */
  static createPartialAcceptRequest(
    itemsToRemove: number[], 
    reason: string
  ): AcceptPartialOrderRequest {
    return {
      itemsToRemove,
      reason: reason.trim()
    };
  }

  /**
   * Cr√©e une requ√™te de modification de quantit√©s
   */
  static createQuantityModifyRequest(
    quantityChanges: Record<number, number>, 
    reason: string
  ): ModifyQuantitiesRequest {
    return {
      quantityChanges,
      reason: reason.trim()
    };
  }
}
