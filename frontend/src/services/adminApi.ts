import { adminApi } from './api';
import type { 
  Drink, 
  CreateDrinkRequest, 
  UpdateDrinkRequest,
  OrderResponse,
  StockCheckResult, 
  EditOrderRequest, 
  AcceptPartialOrderRequest, 
  ModifyQuantitiesRequest,
  OrderEditSuggestions
} from './types';

export class AdminApiService {
  
  // === GESTION DES BOISSONS (existant) ===
  
  static async getDrinks(): Promise<Drink[]> {
    const response = await adminApi.get<Drink[]>('/drinks');
    return response.data;
  }

  static async createDrink(drink: CreateDrinkRequest): Promise<Drink> {
    const response = await adminApi.post<Drink>('/drinks', drink);
    return response.data;
  }

  static async updateDrink(id: number, updates: UpdateDrinkRequest): Promise<Drink> {
    const response = await adminApi.put<Drink>(`/drinks/${id}`, updates);
    return response.data;
  }

  static async deleteDrink(id: number): Promise<void> {
    await adminApi.delete(`/drinks/${id}`);
  }

  // === GESTION DES COMMANDES (existant + √©tendu) ===

  // M√©thodes existantes pour la gestion basique des commandes
  static async getOrdersByStatus(status: string): Promise<OrderResponse[]> {
    console.log('üìã R√©cup√©ration commandes par statut:', status);
    const response = await adminApi.get<OrderResponse[]>(`/orders/${status}`);
    console.log('‚úÖ Commandes r√©cup√©r√©es:', response.data.length);
    return response.data;
  }

  static async acceptOrder(orderId: number): Promise<OrderResponse> {
    console.log('‚úÖ Acceptation commande via API:', orderId);
    const response = await adminApi.post<OrderResponse>(`/orders/${orderId}/accept`);
    console.log('‚úÖ Commande accept√©e:', response.data);
    return response.data;
  }

  static async rejectOrder(orderId: number): Promise<OrderResponse> {
    console.log('‚ùå Refus commande via API:', orderId);
    const response = await adminApi.post<OrderResponse>(`/orders/${orderId}/reject`);
    console.log('‚ùå Commande refus√©e:', response.data);
    return response.data;
  }

  static async markOrderReady(orderId: number): Promise<OrderResponse> {
    console.log('üì¶ Marquage commande pr√™te via API:', orderId);
    const response = await adminApi.post<OrderResponse>(`/orders/${orderId}/ready`);
    console.log('üì¶ Commande marqu√©e pr√™te:', response.data);
    return response.data;
  }

  static async completeOrder(orderId: number): Promise<OrderResponse> {
    console.log('üèÅ Finalisation commande via API:', orderId);
    const response = await adminApi.post<OrderResponse>(`/orders/${orderId}/complete`);
    console.log('üèÅ Commande finalis√©e:', response.data);
    return response.data;
  }

  // === NOUVELLES M√âTHODES POUR L'√âDITION DE COMMANDES ===

  /**
   * V√©rifie le stock d√©taill√© d'une commande
   * GET /admin/orders/{id}/stock-check
   */
  static async checkOrderStock(orderId: number): Promise<StockCheckResult> {
    console.log('üîç V√©rification stock commande:', orderId);
    
    try {
      const response = await adminApi.get<any>(`/orders/${orderId}/stock-check`);
      console.log('‚úÖ R√©ponse v√©rification stock:', response.data);
      
      // Transformation de la r√©ponse backend vers le format frontend
      const stockCheck: StockCheckResult = {
        isFullyAvailable: response.data.isFullyAvailable,
        checkedAt: new Date(response.data.checkedAt),
        issues: response.data.issues.map((issue: any) => ({
          drinkId: issue.drinkId,
          drinkName: issue.drinkName,
          requestedQuantity: issue.requestedQuantity,
          availableQuantity: issue.availableQuantity,
          type: issue.type as 'OutOfStock' | 'InsufficientStock',
          missingQuantity: issue.missingQuantity
        }))
      };
      
      return stockCheck;
    } catch (error) {
      console.error('‚ùå Erreur v√©rification stock:', error);
      throw new Error('Impossible de v√©rifier le stock de cette commande');
    }
  }

  /**
   * Obtient des suggestions d'√©dition automatiques
   * GET /admin/orders/{id}/suggestions
   */
  static async getOrderEditSuggestions(orderId: number): Promise<OrderEditSuggestions> {
    console.log('üí° R√©cup√©ration suggestions √©dition:', orderId);
    
    try {
      const response = await adminApi.get<OrderEditSuggestions>(`/orders/${orderId}/suggestions`);
      console.log('‚úÖ Suggestions r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration suggestions:', error);
      throw new Error('Impossible de g√©n√©rer des suggestions pour cette commande');
    }
  }

  /**
   * R√©cup√®re les d√©tails complets d'une commande
   * GET /admin/orders/{id}
   */
  static async getOrderDetails(orderId: number): Promise<OrderResponse> {
    console.log('üìã R√©cup√©ration d√©tails commande:', orderId);
    
    try {
      const response = await adminApi.get<OrderResponse>(`/orders/${orderId}`);
      console.log('‚úÖ D√©tails commande r√©cup√©r√©s:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration d√©tails:', error);
      throw new Error('Impossible de r√©cup√©rer les d√©tails de cette commande');
    }
  }

  /**
   * √âdite compl√®tement une commande
   * PUT /admin/orders/{id}/edit
   */
  static async editOrder(orderId: number, editRequest: EditOrderRequest): Promise<OrderResponse> {
    console.log('‚úèÔ∏è √âdition commande:', orderId, editRequest);
    
    try {
      // Validation c√¥t√© client
      const validationError = this.validateEditRequest(editRequest);
      if (validationError) {
        throw new Error(validationError);
      }

      const response = await adminApi.put<OrderResponse>(`/orders/${orderId}/edit`, editRequest);
      console.log('‚úÖ Commande √©dit√©e avec succ√®s:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur √©dition commande:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error(error.message || 'Impossible d\'√©diter cette commande');
    }
  }

  /**
   * Accepte une commande en retirant certains articles
   * POST /admin/orders/{id}/accept-partial
   */
  static async acceptPartialOrder(
    orderId: number, 
    acceptRequest: AcceptPartialOrderRequest
  ): Promise<OrderResponse> {
    console.log('‚úÖüî™ Acceptation partielle:', orderId, acceptRequest);
    
    try {
      // Validation c√¥t√© client
      if (!acceptRequest.reason.trim()) {
        throw new Error('Une raison doit √™tre fournie pour les retraits');
      }
      
      if (acceptRequest.itemsToRemove.length === 0) {
        throw new Error('Au moins un article doit √™tre sp√©cifi√© pour le retrait');
      }

      const response = await adminApi.post<OrderResponse>(`/orders/${orderId}/accept-partial`, acceptRequest);
      console.log('‚úÖ Commande accept√©e partiellement:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur acceptation partielle:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error(error.message || 'Impossible d\'accepter partiellement cette commande');
    }
  }

  /**
   * Modifie les quantit√©s d'articles existants
   * PUT /admin/orders/{id}/modify-quantities
   */
  static async modifyOrderQuantities(
    orderId: number, 
    modifyRequest: ModifyQuantitiesRequest
  ): Promise<OrderResponse> {
    console.log('üî¢ Modification quantit√©s:', orderId, modifyRequest);
    
    try {
      // Validation c√¥t√© client
      if (!modifyRequest.reason.trim()) {
        throw new Error('Une raison doit √™tre fournie pour les modifications');
      }
      
      if (Object.keys(modifyRequest.quantityChanges).length === 0) {
        throw new Error('Au moins une modification de quantit√© doit √™tre sp√©cifi√©e');
      }
      
      if (Object.values(modifyRequest.quantityChanges).some(qty => qty < 0)) {
        throw new Error('Les quantit√©s ne peuvent pas √™tre n√©gatives');
      }

      const response = await adminApi.put<OrderResponse>(`/orders/${orderId}/modify-quantities`, modifyRequest);
      console.log('‚úÖ Quantit√©s modifi√©es:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Erreur modification quantit√©s:', error);
      
      if (error.response?.data) {
        throw new Error(error.response.data);
      }
      
      throw new Error(error.message || 'Impossible de modifier les quantit√©s de cette commande');
    }
  }

  // === M√âTHODES UTILITAIRES ===

  /**
   * Valide une requ√™te d'√©dition c√¥t√© client
   */
  private static validateEditRequest(editRequest: EditOrderRequest): string | null {
    if (!editRequest.reason.trim()) {
      return 'Une raison doit √™tre fournie pour la modification';
    }
    
    if (editRequest.items.length === 0) {
      return 'Au moins un article doit √™tre pr√©sent dans la commande modifi√©e';
    }
    
    if (editRequest.items.some(item => item.quantity <= 0)) {
      return 'Toutes les quantit√©s doivent √™tre sup√©rieures √† 0';
    }
    
    if (editRequest.reason.length > 500) {
      return 'La raison ne peut pas d√©passer 500 caract√®res';
    }
    
    return null; // Validation r√©ussie
  }

  /**
   * M√©thodes utilitaires pour la gestion des boissons (existantes)
   */
  static async updateDrinkQuantity(id: number, quantity: number): Promise<void> {
    await this.updateDrink(id, { quantity });
  }

  static async updateDrinkPrice(id: number, price: string): Promise<void> {
    await this.updateDrink(id, { price });
  }

  /**
   * R√©cup√®re toutes les commandes (tous statuts confondus)
   */
  static async getAllOrders(): Promise<OrderResponse[]> {
    console.log('üìã R√©cup√©ration de toutes les commandes...');
    
    const statuses = ['pending', 'accepted', 'rejected', 'ready', 'completed'];
    const promises = statuses.map(status => this.getOrdersByStatus(status));
    
    try {
      const results = await Promise.all(promises);
      const allOrders = results.flat();
      
      console.log(`‚úÖ ${allOrders.length} commandes r√©cup√©r√©es au total`);
      return allOrders;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration toutes commandes:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les statistiques des commandes
   */
  static async getOrdersStatistics(): Promise<{
    total: number;
    pending: number;
    accepted: number;
    rejected: number;
    ready: number;
    completed: number;
  }> {
    const orders = await this.getAllOrders();
    
    const stats = {
      total: orders.length,
      pending: 0,
      accepted: 0,
      rejected: 0,
      ready: 0,
      completed: 0
    };

    orders.forEach(order => {
      const status = order.status.toLowerCase();
      if (stats.hasOwnProperty(status)) {
        (stats as any)[status]++;
      }
    });

    return stats;
  }
}
